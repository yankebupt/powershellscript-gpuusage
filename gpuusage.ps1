// This code was generated by ChatGPT, an AI language model by OpenAI.

// With some harmless modifications of course.

# Get the script name
$scriptName = $MyInvocation.MyCommand.Name

# Check if the script is running as Administrator
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Start-Process powershell.exe -Verb RunAs -ArgumentList "-File `"$($MyInvocation.MyCommand.Definition)`""
    exit
}

# Check for a running instance of the script and kill it if found
Get-WmiObject -Query "Select * from Win32_Process Where CommandLine Like '%$scriptName%'" | ForEach-Object {
    if ($_.ProcessId -ne $PID) {
        Stop-Process -Id $_.ProcessId -Force
    }
}

$port = 5024

# Add ACL rules for HttpListener and open the port in the Windows Firewall
netsh http add urlacl url=http://+:$port/ user=everyone
netsh advfirewall firewall add rule name="Open Port $port" dir=in action=allow protocol=TCP localport=$port

# Rest of your script...
$url = "http://+:$port/"

$gpujob = Start-Job -ScriptBlock {
# 这里是job的脚本内容
    $getcounter = Get-Counter -Counter "\GPU Engine(*)\Utilization Percentage" -SampleInterval 1 -MaxSamples 1 -ErrorAction SilentlyContinue
    ($getcounter.CounterSamples.CookedValue | Measure-Object -Sum).Sum
}
$cpujob = Start-Job -ScriptBlock {
# 这里是job的脚本内容
    (Get-Counter '\Processor(_Total)\% Processor Time' -SampleInterval 1 -MaxSamples 1 -ErrorAction SilentlyContinue).CounterSamples.CookedValue
}

# start http server
$listener = New-Object System.Net.HttpListener
$listener.Prefixes.Add($url)
$listener.Start()

Write-Host "Server is running on $url"

while ($listener.IsListening) {
    $context = $listener.GetContext()
    $response = $context.Response
    $writer = New-Object System.IO.StreamWriter($response.OutputStream)

    $requestUrl = $context.Request.RawUrl


    # send total GPU usage as response
    if ($requestUrl.StartsWith("/gpu")) {
        # TODO: 处理 /gpu 请求
	# get total GPU usage (in percentage)

        if ($gpujob.State -eq "Completed")
        {
            $gpuusage = Receive-Job -Id $gpujob.Id
	    $gpujob = Start-Job -ScriptBlock {
	    # 这里是job的脚本内容
	        $getcounter = Get-Counter -Counter "\GPU Engine(*)\Utilization Percentage" -SampleInterval 1 -MaxSamples 1 -ErrorAction SilentlyContinue
	        ($getcounter.CounterSamples.CookedValue | Measure-Object -Sum).Sum
	    }
        }
        $writer.WriteLine($gpuusage)
        $writer.Flush()
    }
    # send total CPU usage as response
    elseif ($requestUrl.StartsWith("/cpu")) {
        # TODO: 处理 /gpu 请求
	# get total CPU usage (in percentage)

        if ($cpujob.State -eq "Completed")
        {
            $cpuusage = Receive-Job -Id $cpujob.Id
	    $cpujob = Start-Job -ScriptBlock {
	    # 这里是job的脚本内容
	        (Get-Counter '\Processor(_Total)\% Processor Time' -SampleInterval 1 -MaxSamples 1 -ErrorAction SilentlyContinue).CounterSamples.CookedValue
	    }
        }
        $writer.WriteLine($cpuusage)
        $writer.Flush()
    }
    else
    {
    $writer.WriteLine('<!DOCTYPE html>

<html>
<head>
	<meta charset="utf-8">
	<title>Pie Chart</title>
	<!-- Chart.js -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
	<div id="app" class="div-container">
	    <div class="chart-container">
		<canvas id="gpupie-chart"></canvas>
		<div class="chart-text">GPU</div>
	    </div>
	    <div class="chart-container">
		<canvas id="cpupie-chart"></canvas>
		<div class="chart-text">CPU</div>
	    </div>
	</div>
	<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	<script>
        	var gpupercent = 0
        	var cpupercent = 0
		var app = new Vue({
			el: ''#app'',
			data: {
				gpupieChart: null,
				cpupieChart: null,
				gpupercent: ''gpupercent'', // init usage
				cpupercent: ''cpupercent''  // init usage
			},
			mounted: function() {
				// init pie chart
				this.gpupieChart = new Chart(document.getElementById(''gpupie-chart''), {
					type: ''doughnut'',
					data: {
						labels: [''usage'', ''idle''],
						datasets: [{
							backgroundColor: [''#36A2EB'', ''#FF6384''],
							data: [this.gpupercent, 100 - this.gpupercent]
						}]
					},
					options: {
						title: {
							display: true,
							text: ''GPU''
						}
					}
				});
				this.cpupieChart = new Chart(document.getElementById(''cpupie-chart''), {
					type: ''doughnut'',
					data: {
						labels: [''usage'', ''idle''],
						datasets: [{
							backgroundColor: [''#36A2EB'', ''#FF6384''],
							data: [this.cpupercent, 100 - this.cpupercent]
						}]
					},
					options: {
						title: {
							display: true,
							text: ''CPU''
						}
					}
				});

				// update pie chart pre second
				setInterval(this.updatePieChart, 500);
			},
			methods: {
				updatePieChart: function() {
					// generate random 0-1
					//this.percent = Math.random();
                                        axios.get("/gpu").then(function(response){
						gpupercent= parseFloat(response.data); // 将字符转成数字
				        })
                                        axios.get("/cpu").then(function(response){
						cpupercent= parseFloat(response.data); // 将字符转成数字
				        })
					// update pie chart data
					this.gpupieChart.data.datasets[0].data = [gpupercent, 100 - gpupercent];
					this.gpupieChart.update();
					this.cpupieChart.data.datasets[0].data = [cpupercent, 100 - cpupercent];
					this.cpupieChart.update();
				}
			}
		})
	</script>
<style>
.div-container {
  display: flex;
  flex-direction: column;
  height: 90vh;
  justify-content: center;
}
.chart-container {
  position: relative;
  height: 45vh;
}
canvas{
    margin: 0 auto;
}
    .chart-text {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-family: Arial;
      font-size: 10vh;
    }
</style>
</body>
</html>')
    $writer.Flush()
    }

    $response.Close()
}

$listener.Stop()
